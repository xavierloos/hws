// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")  
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum UserPermission {
  READONLY
  EDIT
  CREATE
  DELETE
  ALL
}

model User {
  id                        String           @id @default(cuid()) @map("_id")
  username                  String?          @unique //Optional for social creations
  name                      String?
  email                     String           @unique
  emailVerified             Boolean          @default(false)
  isActive                  Boolean          @default(true)
  image                     String?
  password                  String?
  about                     String?
  tel                       String?
  birthday                  String?
  role                      UserRole         @default(USER)
  permission                UserPermission   @default(READONLY)
  accounts                  Account[]
  otpEnabled                Boolean          @default(false)
  emailNotificationsEnabled Boolean          @default(false)
  smsNotificationsEnabled   Boolean          @default(false)
  otpConfirmation           OTPConfirmation?
  file                      File[]           @relation("CreatedBy")
  comments                  Comment[]
  social                    Social?
  createdTasks              Task[]           @relation("CreatedBy")
  assignedTaskIds           String[]
  assignedTasks             Task[]           @relation("AssignedTo", fields: [assignedTaskIds], references: [id])
  createdBlogs              Blog[]           @relation("BlogCreator")
  modifiedBlogs             Blog[]           @relation("BlogModifier")

  @@unique([email, id])
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Token {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model OTPConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id      String   @id @default(cuid()) @map("_id")
  name    String
  blogIds String[]
  blogs   Blog[]   @relation(fields: [blogIds], references: [id])
}

model Blog {
  id          String     @id @default(cuid()) @map("_id")
  name        String     @unique
  slug        String     @unique
  description String
  isActive    Boolean    @default(false)
  content     String
  views       Int        @default(0)
  likes       Int        @default(0)
  tags        Json?
  createdAt   DateTime   @default(now())
  creatorId   String
  creator     User       @relation("BlogCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  modifiedAt  DateTime   @default(now())
  modifierId  String
  modifier    User       @relation("BlogModifier", fields: [modifierId], references: [id])
  comments    Comment[]
  thumbnailId String
  thumbnail   File       @relation("Thumbnail", fields: [thumbnailId], references: [id])
  bannerId    String
  banner      File       @relation("Banner", fields: [bannerId], references: [id])
  fileIds     String[]
  files       File[]     @relation(fields: [fileIds], references: [id])
  categoryIds String[]
  categories  Category[] @relation(fields: [categoryIds], references: [id])
}

model File {
  id           String    @id @default(cuid()) @map("_id")
  name         String
  type         String
  size         Int
  lastModified Int
  createdAt    DateTime  @default(now())
  creatorId    String
  user         User      @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  blogIds      String[]
  blogs        Blog[]    @relation(fields: [blogIds], references: [id])
  taskIds      String[]
  tasks        Task[]    @relation(fields: [taskIds], references: [id])
  commentsIds  String[]
  comments     Comment[] @relation(fields: [commentsIds], references: [id])
  thumbnails   Blog[]    @relation("Thumbnail")
  banners      Blog[]    @relation("Banner")
}

model Task {
  id              String    @id @default(cuid()) @map("_id")
  name            String
  type            String?
  priority        Json
  dueDate         String
  attachments     Json?
  description     String
  status          Json
  createdAt       DateTime  @default(now())
  modifiedAt      DateTime  @default(now())
  creatorId       String
  createdBy       User      @relation("CreatedBy", fields: [creatorId], references: [email], onDelete: Cascade)
  assignedUserIds String[]
  assignedTo      User[]    @relation("AssignedTo", fields: [assignedUserIds], references: [id])
  comments        Comment[]
  fileIds         String[]
  files           File[]    @relation(fields: [fileIds], references: [id])
}

model Comment {
  id          String   @id @default(cuid()) @map("_id")
  name        String?
  comment     String
  attachments Json?
  // relatedId   String //Could be related to blog, task, product, etc
  createdBy   String?
  createdAt   DateTime @default(now())
  // user        User?    @relation(fields: [createdBy], references: [email], onDelete: Cascade)
  // blog        Blog?    @relation(fields: [relatedId], references: [id], onDelete: Cascade)
  verified    Boolean  @default(false)
  // Add these fields
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?
  Blog        Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String?
  fileIds     String[]
  files       File[]   @relation(fields: [fileIds], references: [id])
}

model Newsletter {
  id                        String  @id @default(cuid()) @map("_id")
  email                     String  @unique
  emailVerified             Boolean @default(false)
  emailNotificationsEnabled Boolean @default(true)
}

model Invitation {
  id             String  @id @default(cuid()) @map("_id")
  email          String  @unique
  invitationSent Boolean @default(false)
}

model Social {
  id        String  @id @default(cuid()) @map("_id")
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  github    String?
  userId    String  @unique
  // user      User     @relation(fields: [userId], references: [id])
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
